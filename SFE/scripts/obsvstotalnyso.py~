'''
Plot observed vs total NYSO for the same clouds
Sam Geen, February 2017
'''

from startup import *
import freefalltime, totalsfevstime, sfrvstime, starsvsdensegas

class NYSO(starsvsdensegas.SFEPlotter):
    def Plot(self):
        def yfunc(data):
            return data.stars
        def xfunc(data):
            return data.times
        self.PlotError(xfunc,yfunc)

class Mdense(starsvsdensegas.SFEPlotter):
    def Plot(self):
        def yfunc(data):
            return data.gas
        def xfunc(data):
            return data.times
        self.PlotError(xfunc,yfunc)

def Run():
    # Set up plot
    simnames = ["L-RT","M-RT","S-RT","XS-RT",
                "L-NRT","M-NRT","S-NRT","XS-NRT"]
    sims = [Hamu.Simulation(s) for s in simnames]
    fig, ax = plt.subplots(1,1)

    # Functions to use
    def sfunc(data):
        return data.stars
    # Make lines
    for sim in sims:
        x = []
        yl = []
        ym = []
        yh = []
        # Total stars
        tstars = NYSO(sim,Aklow=[0.0],allstars=True,
                      ysoage=[0.0],name="")
        t, xmin, xmed, xmax = tstars.MakeErrors(sfunc)
        # Observed YSO count
        Aklows = np.array([0.1])
        ysoages = np.arange(-1.0,1.0001,0.2)+3.0
        ostars = NYSO(sim,Aklow=Aklows,allstars=False,
                      ysoage=ysoages,name="")
        t,ymin,ymed,ymax = ostars.MakeErrors(sfunc)
        # Plot ratio vs time
        tff = freefalltime.Tff(sim,Myr=True)
        x = t-tff
        y = ymed / xmed
        yl = ymin / xmax
        yh = ymax / xmin
        line = linestyles.line(sim.Name())
        colour = linestyles.colour(sim.Name())
        ax.plot(x,y,linestyle=line,color=colour)
        ax.scatter(x[-1],y[-1],c=colour,edgecolors='none')
        # Plot fill around min/max                                          
        taba = np.concatenate((x,x[::-1])) # there and back again       
        pcontour = np.concatenate((yl,yh[::-1]))
        ax.fill(taba,pcontour,alpha=0.5,
                edgecolor='none',facecolor=colour)
    # Lines showing 1:1 and 1:10
    #ax.plot([1e-5,10],[1e-5,10],linestyle=":",color="k")
    #ax.plot([1e-6,10],[1e-5,100],linestyle=":",color="k")
    # Legends
    lines, labels = linestyles.sizelegend()
    leg1 = ax.legend(lines,labels,fontsize="x-small",
                     frameon=False,loc="upper right")
    lines, labels = linestyles.rtlegend()
    leg2 = ax.legend(lines,labels,fontsize="x-small",
                     frameon=False,loc="lower center")
    ax.add_artist(leg1)
    #leg2.get_frame().set_linewidth(0.0)
    def MakeAktxt(ax,Ak):
        txt = "(A$_{\mathrm{k}}="+str(Ak)+")$"
        ax.text(0.95, 0.95,txt,
                horizontalalignment='right',
                verticalalignment='top',
                transform = ax.transAxes)
    ax.set_ylabel("$M_{YSO}/M_{*}$")
    ax.set_xlabel("Time-$t_{ff}$ / Myr")
    #ax.set_xlabel("TSFE")
    #ax.set_ylabel("OSFE")
    #ax.set_xscale("log")
    ax.set_yscale("log")
    xl = [-0.5,17-4.25]
    yl = [5e-2,6]
    ax.set_xlim(xl)
    ax.set_ylim(yl)
    xl[0] = 4.0
    ax.fill([xl[0],xl[1],xl[1],xl[0]], 
            [yl[0],yl[0],yl[1],yl[1]], 
            color=r"#888888",hatch='\\',alpha=0.2)
    #MakeAktxt(ax,0.8)
    ax.plot([0,25],[1,1],linestyle=":",color="k")
    # Output figure
    fig.subplots_adjust(wspace=0, hspace=0)
    #fig.set_size_inches(15.0,5.0)
    fig.savefig("../plots/obsvstotalnyso.pdf")
        
        
if __name__=="__main__":
    Run()    
