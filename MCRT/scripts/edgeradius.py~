'''
Find the distribution of radii to the diffuse medium from the source
Sam Geen, February 2015
'''

import customplot, rayprof
import pymses, Hamu
import os
import numpy as np
import matplotlib.pyplot as plt
from pymses.utils import constants as C

rextent = 1.0 # pc
pctocm = 3.08567758e18

def FindEdges(snap,nosort=False):
    limit = 3.0 # density limit in at/cc
    r,p = rayprof.makeprofsHamu(snap.hamusnap,"rho")
    radii = r[0:rayprof.nray]
    profs = np.reshape(p,(rayprof.nprofs, rayprof.nray)).T # No idea
    rmaxes = np.zeros((rayprof.nprofs))
    # Set up densities
    dens = rmaxes*0.0
    for i in range(0,rayprof.nprofs):
        p = profs[:,i]
        try:
            rmax = radii[p < limit].min()
        except:
            rmax = 0.0
        rmaxes[i] = rmax
        # Now get the mean density along the ray
        r = radii
        if rmax > 0.0:
            p = p[r < rmax]
            r = r[r < rmax]
        dr = np.diff(r)
        p = 0.5 * (p[1:] + p[:-1]) # mean at midpoint of dr
        r = 0.5 * (r[1:] + r[:-1])
        dm = p*4.0*np.pi*r**2*dr
        mass = np.sum(dm)
        dens[i] = mass / (4.0/3.0 * np.pi * r[-1]**3)
    if not nosort:
        # NOTE: THIS WILL BREAK MATCHING WITH DENSITY
        rmaxes.sort()
        dens = rmaxes*0.0
    return rmaxes, dens

FindEdgesHamu = Hamu.Algorithm(FindEdges)

def Run(simname,time,noplot=False):
    print "Running edgeradius for ", simname
    sim = Hamu.Simulation(simname)
    first = sim.Snapshots()[0]
    tcode = time / first.RawData().info["unit_time"].express(C.Myr)
    snap = sim.FindAtTime(tcode)
    # Run. Don't sort if we're not plotting (allows densities to be used)
    rmaxes,dens = FindEdgesHamu(snap,nosort=noplot) 
    if not noplot:
        plt.clf()
        plt.plot(np.arange(0,len(rmaxes)),rmaxes)
        plt.savefig("../plots/edgeradius/edgeradius"+simname+".pdf")
    print "Done for ", simname
    print "-----------------"
    return rmaxes,dens

if __name__=="__main__":
    Run("N48_M4_B02",1.25)
    Run("N48_M4_B02_F2",1.25*2)
    Run("N48_M4_B02_F3",1.25*3)
    Run("N48_M4_B02_C",1.25*0.5**3)
    Run("N48_M4_B02_C2",1.25*0.75**3)
